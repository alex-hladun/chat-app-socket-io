version: 2.1
anchors:
  configure-aws-access: &configure-aws-access
    run:
      name: Configure AWS access
      command: |
        mkdir -p ~/.aws
        file=~/.aws/credentials
        echo "[default]" > $file
        echo "aws_access_key_id = $AWS_ACCESS_KEY_ID" >> $file
        echo "aws_secret_access_key = $AWS_SECRET_ACCESS_KEY" >> $file
        echo "aws_region = $AWS_REGION" >> $file
orbs:
  # aws-cli: circleci/aws-cli@1.0.0
  node: circleci/node@4.2.0
  # terraform: 'circleci/terraform@dev:alpha'
  aws-ecr: circleci/aws-ecr@7.0.0
executors:
  docker:
    docker:
      - image: public.ecr.aws/t6q5r3l2/laprairefoe-circleci
  default:
    docker:
      - image: public.ecr.aws/t6q5r3l2/laprairefoe-circleci
jobs:
  Build react app:
    executor: docker
    working_directory: /tmp/project
    docker:
      - image: public.ecr.aws/t6q5r3l2/laprairefoe-circleci
    steps:
      - checkout
      - run:
          name: Install node dependencies and run build
          command: |
            cd client
            npm install .
            CI=false npm run build
            cd ../server
            npm install .
      - persist_to_workspace:
          root: .
          paths:
            - .
  
  Build docker image:
      docker:
        - image: public.ecr.aws/t6q5r3l2/laprairefoe-circleci
        # - image: docker:17.05.0-ce-git
      steps:
        - attach_workspace:
            at: .
        - checkout
        # - setup_remote_docker
        - *configure-aws-access
        # - run:
        #     name: Install docker & aws dependencies
        #     command: |
        #       cd client
        #       ls
        #       cd ..
        #       apk add --no-cache \
        #         py-pip=9.0.0-r1
        #       pip install \
        #         docker-compose==1.12.0 \
        #         awscli==1.11.76
        # - restore_cache:
        #     keys:
        #       - v1-{{ .Branch }}
        #     paths:
        #       - /caches/app.tar
        # - run:
        #     name: Load Docker image layer cache
        #     command: |
        #       set +o pipefail
        #       docker load -i /caches/app.tar | true
        # - run:
        #     name: Build application Docker image
        #     command: |
        #       ls
        #       cd server
        #       ls
        #       docker build --cache-from=app . -t xerris-socket-app
       
        # - run:
        #     name: Save Docker image layer cache
        #     command: |
        #       mkdir -p /caches
        #       docker save -o /caches/app.tar app
        # - save_cache:
        #     key: v1-{{ .Branch }}-{{ epoch }}
        #     paths:
        #       - /caches/app.tar
  Deploy infrastructure:
    docker:
      - image: public.ecr.aws/t6q5r3l2/laprairefoe-circleci
    steps:
      - attach_workspace:
         at: .
      - checkout
      - setup_remote_docker
      - *configure-aws-access
      - run:
            name: Deploy Terraform to AWS
            command: |
              which aws
              cd server
              ls
              cd ../infrastructure-fargate
              ls
              sh terraform-exec.sh 1
      # - run:
      #       name: Configure AWS default region
      #       command: |
      #             aws configure set region $AWS_REGION
      # - run:
      #     name: Build & Push docker image to ECR
      #     command: |
      #       echo "Your curent directory:"  
      #       ls
      #       cd infrastructure-fargate
      #       ls
      #       ECR_ENDPOINT=$(terraform output ecr_endpoint)
      #       echo "Your ECR endpoint: $ECR_ENDPOINT"
      #       cd ../server/
      #       login=”$(aws ecr get-login)” 
      #       ${login} 
      #       docker tag xeris-socket-app “${ECR_ENDPOINT}/app:${CIRCLE_SHA1}” 
      #       docker push “${ECR_ENDPOINT}/app:latest”
      - persist_to_workspace:
          root: .
          paths:
            - .
  destroy:
    docker:
      - image: docker.mirror.hashicorp.services/hashicorp/terraform:light
    steps:
      - checkout
      - *configure-aws-access
      - attach_workspace:
          at: .
      - run:
          name: terraform create destroy plan
          command: |
            ls
            cd infrastructure-fargate
            sh terraform-destroy.sh 1
      - persist_to_workspace:
          root: .
          paths:
            - .

workflows:
  devDeploy:
    jobs:
      - hold-deploy:
          type: approval
      - hold-destroy:
          type: approval
      - destroy:
          context: CIRCLE
          requires:
            - hold-destroy
      - Build react app:
          context: CIRCLE
          requires:
            - hold-deploy
      - aws-ecr/build-and-push-image:
          context: CIRCLE
          requires: 
            - Build react app
          account-url: AWS_ECR_ACCOUNT_URL
          aws-access-key-id: AWS_ACCESS_KEY_ID
          aws-secret-access-key: AWS_SECRET_ACCESS_KEY
          create-repo: true
          dockerfile: Dockerfile
          path: ./server
          region: AWS_REGION
          repo: xerris-socket-app-repo
          tag: "$CIRCLE_SHA1"
          attach-workspace: true
      # - Build docker image:
      #     context: CIRCLE
      #     requires:
      #       - Build React app
      - Deploy infrastructure:
          context: CIRCLE
          requires:
          -  aws-ecr/build-and-push-image
          
      